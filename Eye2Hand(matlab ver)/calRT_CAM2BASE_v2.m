clc
clear all
%% 采集7组单轴移动数据
% P_C: 相机坐标系下采集数据
% T_E2B(i): 第i组末端坐标系到基坐标系的变换阵
% T_C2C(i): 第1组数据P_C(1)到第i组数据P_C(i)的变换阵
load('measure_CamPos40x3_ArmPos10x6.mat')
%求解R_B2C_init
R_B2C_init = calR(P_C(5:end,:));
%% 构造A(i)和B(i)
% P_C_N: 采集N组欧拉角变换数据(变换较大的数据)
% pose_arm_N: 对应的相机坐标系坐标值
P_C_N = [
12.39718, -51.067814, 728.78113;
 103.78207, -31.644859, 703.33881;
 59.363312, 0.39002752, 724.97278;
 -31.323868, -73.630211, 737.97479;
49.748497, -81.11322, 699.9057;
 130.33144, -77.583725, 646.09143;
 103.68002, -40.188721, 683.25092;
 6.7456264, -95.090118, 720.90881;
24.66367, -50.223114, 652.14099;
 111.90746, -50.991535, 610.3053;
 79.009094, -9.638835, 636.38354;
 -20.27849, -62.995659, 670.20874;
55.098289, -36.603127, 720.80756;
 141.97406, -28.252602, 678.59875;
 110.00163, 5.9195857, 714.35492;
 9.9714136, -52.689903, 735.28412;
93.56633, -83.990189, 747.02637;
 183.86163, -80.413101, 711.81995;
 151.95828, -45.707253, 747.44958;
 46.247208, -97.137833, 757.13727;
1.3232899, -8.616745, 602.06769;
 60.857243, 15.418862, 529.6474;
 45.330551, 40.953335, 580.61328;
 -32.815331, -31.265982, 630.00659;
-36.852348, 2.1129627, 607.47052;
 46.320995, 21.035496, 561.59326;
 9.3398266, 52.756016, 594.87775;
 -78.187424, -20.005245, 624.7276;
28.899591, -85.229477, 680.20978;
 117.11668, -100.67174, 643.53583;
 89.640434, -53.961361, 666.35266;
 -18.339634, -90.332855, 696.05487;
74.030388, -129.76398, 691.12952;
 153.53601, -166.11559, 649.97028;
 141.31296, -116.09498, 678.8421;
 27.500439, -122.63711, 708.32178;
-81.373848, -64.606766, 617.79224;
 1.3321106, -43.838955, 572.31262;
 -46.341267, -12.749725, 586.82153;
 -118.72324, -87.826431, 640.77649;
];
N = size(pose_arm_N, 1);
T_C2C_N = zeros(4,4,N);
A_N = zeros(4,4,N);
T_E2B1 = pose2T_E2B(pose_arm_N(1,:));
for i=1:10
    [R_C2C_i,t_C2C_i] = Kabsch(P_C_N(1:4,:)',P_C_N(i*4-3:i*4,:)');
    T_C2C_N(:,:,i) = [R_C2C_i,t_C2C_i;0,0,0,1]; 
    T_E2Bi = pose2T_E2B(pose_arm_N(i,:));
    A_N(:,:,i) = T_E2Bi*T_E2B1^(-1);
end
B_N = T_C2C_N;
err_list = zeros(N, 1);
for i=1:N
    R_B = B_N(1:3,1:3,i);
    R_A = A_N(1:3,1:3,i);
    t_A= A_N(1:3,4,i);
    t_B= B_N(1:3,4,i);
    delta_err = R_B2C_init*R_A-R_B*R_B2C_init;
    err_list(i) = sum(sum(delta_err.^2))/numel(delta_err);
end
err_list'
% t_B2C_init = (R_B-eye(3))^(-1)*(R_B2C_init*t_A-t_B)
%% 求优T_B2C
t_base2cam = [-188.510  82.918  790.387];  % 使用标识球靠近底座位置在光学定位系统上粗略定位
[r3,r2,r1] = dcm2angle(R_B2C_init);

% %使用tsai方法求解AX = XB
% T_B2C = tsai(B_N, A_N)  % 误差太大，弃用

% 使用求优工具箱求解
para0 = [r1,r2,r3,t_base2cam];
paraRang = [0.5*pi*ones(1,3), 50*ones(1,3)];
options= optimoptions('fmincon','Algorithm','active-set','Display','off');
isAgain=1; mErr=10; paraDelta=1;
while (isAgain||mErr>0.08)&&paraDelta>0.001
    [paras,mErr]= fmincon(@(para)computeErro(A_N, B_N, para),para0,[],[],[],[],para0-paraRang,para0+paraRang,[],options);  
    paraDelta = sum(abs(paras-para0));
    isAgain = sum(((abs(paraRang)-abs(paras-para0))<0.001));
    para0 = paras;
end
% T_B2C求优结果
R_B2C = angle2dcm(para0(1),para0(2),para0(3));
t_B2C = para0(4:6);
T_B2C_opt = [R_B2C, t_B2C';0,0,0,1]
mErr

%% 验证误差:AX-XB
for i=2:size(A_N, 3)
    delta((i-1)*4-3:(i-1)*4,:) = T_B2C_opt*A_N(:,:,i)-B_N(:,:,i)*T_B2C_opt;
end
delta 
%% T_E2o
temp = [0.00000000e+00, 9.68285131e+01, 5.56483956e+01, -4.82045988e+01;
        0.00000000e+00, 0.00000000e+00, 4.20890318e+01, -1.34696577e+01;
        0.00000000e+00, 0.00000000e+00, 0.00000000e+00, -1.26345480e-02];
% 计算T_C2o和T_E2B
[r,t] = Kabsch(P_C_N(1:4,:)', temp);
T_C2o = [r,t;0,0,0,1];
T_E2B = pose2T_E2B(pose_arm_N(1,:));
T_E2o = T_C2o*T_B2C_opt*T_E2B

% T_E2o =
% 
%    -0.9288   -0.3294    0.1700  -56.2382
%     0.2018   -0.0645    0.9773  -61.4003
%    -0.3110    0.9420    0.1263    9.1370
%          0         0         0    1.0000

function RMSE = computeErro(A, B, para)
    R_B2C = angle2dcm(para(1),para(2),para(3));
    t_B2C = para(4:6);
    T_B2C = [R_B2C, t_B2C';0,0,0,1];
    delta = zeros(4*(size(A, 3)-1),4);
    for i=2:size(A, 3)
        delta((i-1)*4-3:(i-1)*4,:) = T_B2C*A(:,:,i)-B(:,:,i)*T_B2C;
        MSE = sum(sum(delta.^2))/numel(delta);
        RMSE = sqrt(MSE);
    end
end